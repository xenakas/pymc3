{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Censored Data Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running on PyMC3 v3.4.1\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import pymc3 as pm\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import theano.tensor as tt\n",
    "\n",
    "plt.style.use('seaborn-darkgrid')\n",
    "print('Running on PyMC3 v{}'.format(pm.__version__))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[This example notebook on Bayesian survival\n",
    "analysis](http://docs.pymc.io/notebooks/survival_analysis.html) touches on the\n",
    "point of censored data. _Censoring_ is a form of missing-data problem, in which\n",
    "observations greater than a certain threshold are clipped down to that\n",
    "threshold, or observations less than a certain threshold are clipped up to that\n",
    "threshold, or both. These are called right, left and interval censoring,\n",
    "respectively. In this example notebook we consider interval censoring.\n",
    "\n",
    "Censored data arises in many modelling problems. Two common examples are:\n",
    "\n",
    "1. _Survival analysis:_ when studying the effect of a certain medical treatment\n",
    "   on survival times, it is impossible to prolong the study until all subjects\n",
    "   have died. At the end of the study, the only data collected for many patients\n",
    "   is that they were still alive for a time period $T$ after the treatment was\n",
    "   administered: in reality, their true survival times are greater than $T$.\n",
    "\n",
    "2. _Sensor saturation:_ a sensor might have a limited range and the upper and\n",
    "   lower limits would simply be the highest and lowest values a sensor can\n",
    "   report. For instance, many mercury thermometers only report a very narrow\n",
    "   range of temperatures.\n",
    "\n",
    "This example notebook presents two different ways of dealing with censored data\n",
    "in PyMC3:\n",
    "\n",
    "1. An imputed censored model, which represents censored data as parameters and\n",
    "   makes up plausible values for all censored values. As a result of this\n",
    "   imputation, this model is capable of generating plausible sets of made-up\n",
    "   values that would have been censored. Each censored element introduces a\n",
    "   random variable.\n",
    "\n",
    "2. An unimputed censored model, where the censored data are integrated out and\n",
    "   accounted for only through the log-likelihood. This method deals more\n",
    "   adequately with large amounts of censored data and converges more quickly.\n",
    "\n",
    "To establish a baseline we compare to an uncensored model of the uncensored\n",
    "data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Produce normally distributed samples\n",
    "np.random.seed(1618)\n",
    "size = 500\n",
    "mu = 13.\n",
    "sigma = 5.\n",
    "samples = np.random.normal(mu, sigma, size)\n",
    "\n",
    "# Set censoring limits\n",
    "high = 16.\n",
    "low = -1.\n",
    "\n",
    "# Censor samples\n",
    "censored = samples[(samples > low) & (samples < high)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1107265f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize uncensored and censored data\n",
    "_, axarr = plt.subplots(ncols=2, figsize=[16, 4], sharex=True, sharey=True)\n",
    "for i, data in enumerate([samples, censored]):\n",
    "    sns.distplot(data, ax=axarr[i])\n",
    "axarr[0].set_title('Uncensored')\n",
    "axarr[1].set_title('Censored')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Baseline - Uncensored Model of Uncensored Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uncensored model\n",
    "with pm.Model() as uncensored_model:\n",
    "    mu = pm.Normal('mu', mu=0., sd=(high - low) / 2.)\n",
    "    sigma = pm.HalfNormal('sigma', sd=(high - low) / 2.)\n",
    "    observed = pm.Normal('observed', mu=mu, sd=sigma, observed=samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 1 - Imputed Censored Model of Censored Data\n",
    "\n",
    "In this model, we impute the censored values from the same distribution as the uncensored data. Sampling from the posterior generates possible uncensored data sets.\n",
    "\n",
    "This model makes use of [PyMC3's bounded variables](https://docs.pymc.io/api/bounds.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputed censored model\n",
    "n_right_censored = len(samples[samples >= high])\n",
    "n_left_censored = len(samples[samples <= low])\n",
    "n_observed = len(samples) - n_right_censored - n_left_censored\n",
    "\n",
    "with pm.Model() as imputed_censored_model:\n",
    "    mu = pm.Normal('mu', mu=0., sd=(high - low) / 2.)\n",
    "    sigma = pm.HalfNormal('sigma', sd=(high - low) / 2.)\n",
    "    \n",
    "    right_censored = pm.Bound(pm.Normal, lower=high)(\n",
    "        'right_censored', mu=mu, sd=sigma, shape=n_right_censored\n",
    "    )\n",
    "    left_censored = pm.Bound(pm.Normal, upper=low)(\n",
    "        'left_censored', mu=mu, sd=sigma, shape=n_left_censored\n",
    "    )\n",
    "    \n",
    "    observed = pm.Normal(\n",
    "        'observed',\n",
    "        mu=mu,\n",
    "        sd=sigma,\n",
    "        observed=censored,\n",
    "        shape=n_observed\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 2 - Unimputed Censored Model of Censored Data\n",
    "\n",
    "In this model, we do not impute censored data, but instead integrate them out through the likelihood.\n",
    "\n",
    "The implementations of the likelihoods are non-trivial. See the [Stan manual](https://github.com/stan-dev/stan/releases/download/v2.14.0/stan-reference-2.14.0.pdf) (section 11.3 on censored data) and the [original PyMC3 issue on GitHub](https://github.com/pymc-devs/pymc3/issues/1833) for more information.\n",
    "\n",
    "This model makes use of [PyMC3's `Potential`](https://docs.pymc.io/api/model.html#pymc3.model.Potential)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the log cdf and log complementary cdf of the normal Distribution from PyMC3\n",
    "from pymc3.distributions.dist_math import normal_lcdf, normal_lccdf \n",
    "\n",
    "# Helper functions for unimputed censored model\n",
    "def left_censored_likelihood(mu, sigma, n_left_censored, lower_bound):\n",
    "    ''' Likelihood of left-censored data. '''\n",
    "    return n_left_censored * normal_lcdf(mu, sigma, lower_bound)\n",
    "\n",
    "\n",
    "def right_censored_likelihood(mu, sigma, n_right_censored, upper_bound):\n",
    "    ''' Likelihood of right-censored data. '''\n",
    "    return n_right_censored * normal_lccdf(mu, sigma, upper_bound)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unimputed censored model\n",
    "with pm.Model() as unimputed_censored_model:\n",
    "    mu = pm.Normal('mu', mu=0., sd=(high - low) / 2.)\n",
    "    sigma = pm.HalfNormal('sigma', sd=(high - low) / 2.)\n",
    "    \n",
    "    observed = pm.Normal(\n",
    "        'observed',\n",
    "        mu=mu,\n",
    "        sd=sigma,\n",
    "        observed=censored,\n",
    "    )\n",
    "    \n",
    "    left_censored = pm.Potential(\n",
    "        'left_censored',\n",
    "        left_censored_likelihood(mu, sigma, n_left_censored, low)\n",
    "    )\n",
    "    right_censored = pm.Potential(\n",
    "        'right_censored',\n",
    "        right_censored_likelihood(mu, sigma, n_right_censored, high)\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [sigma, mu]\n",
      "Sampling 2 chains: 100%|██████████| 3000/3000 [00:01<00:00, 2633.37draws/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1gAAACsCAYAAABmdA06AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xd4FNX+x/H3liSEJCSQBJAmFjh4FQFFwcZVQb2KYrv8xHIVuyLqVSmKBURQRAUL6hVERQS7iL1yUUSwXJGmHAEpiqihJEAC6b8/NsQQNslustky+byeh4fs7szu+Z6dmbPfM2fOuEpLSxEREREREZG6c0e6ACIiIiIiIk6hBEtERERERCRElGCJiIiIiIiEiBIsERERERGREFGCJSIiIiIiEiJKsEREREREREJECZaIiIiIQxhjuhpj7op0OUQaMpfugyUiIiIiIhIa3kgXQCSWGWMGAmcAicA+wCPAmcAhwBDgKWtty7JlXwL+Y62dG5HCioiI4xhjOgLPAkX4RiZNBvpaawcYYy4HBgNbgALg5bLVqmy3rLWzjTGDgXOAJGATcLa1tiB8UYnENg0RFKm7FGvtacD9wLX4GqWrgEsjWioREWkITgK+BvoAI4FUAGNMBjAcOAY4GV+ytFuV7ZYxxg2kA32stT3wdcYfEZ5QRJxBCZZI3S0q+z8b+NFaWwpsBRpVWs4V1lKJiEhDMBVf+/MBvrNVRWXPHwj8YK3Ns9YWA19WWKfKdstaW4LvbNeLxpipQBsgrv7DEHEOJVgidVfdhYxxxphkY0w8cHC4CiQiIg3GmcA8a21v4FV8Z60AVgGdjDGJZWeljqywTpXtljHmUOAsa+15wPX4fiuqg1AkCLoGS6R+PQwsBH4G1kW4LCIi4jzfAtOMMXcAHuAx4Ehr7SZjzP3APHzXYCUChdR8NmoVkGuMmV/2eCPQql5KLuJQmkVQRERExGGMMV5guLV2rDHGBXwO3G6t/TzCRRNxPA0RFBEREXEYa20RkGSM+Q5YAHyH72yWiNQzncESEREREREJEZ3BEhERERERCRElWCIiIiIiIiES8CyCWVnbazWWMDk5gR078muzatRxUizgrHgUS/RyUjxOigWiK57MzJQ6TQNd2zYq1kTTdxZNVC/+qV78U73sTXXi3+56CbaNqvczWF6vp74/ImycFAs4Kx7FEr2cFI+TYgHnxdMQ6DvzT/Xin+rFP9XL3lQn/tW2XjREUEREREREJESUYImIiIiIiISIEiwREREREZEQUYIlIiIiIiISIkqwREREREREQiTgadqTkxNqNZOGx+MmLa1x0OtFIyfFAs6KJ+picbuJ8wQ363RhcSmUlERfLHXkpHicFAs4Lx4Rp0htmkS8N/A+8IKiEnK25tZjiUQkGAEnWLWdGz8trTHZ2Xm1WjfaOCkWcFY80RZLZmYK4xZtCmqdW7tlkLUlL+piqSsnxeOkWCC64snMTIl0EUSiRrzXHVQbcmu3jHosjYgES0MERUREREREQkQJloiIiIiISIgowRIREREREQkRJVgiIiIiIiIhEvAkFyIiIiISnGBnBBSR2KcES0RERKSeBDsjIGhWQJFYpwRLJADqgRQRkWhVVFJa5a0Oqnpe984SqT9KsEQCoHuSiIhItPK6XTpLJhJF1CUvIiIiIiISIkqwREREREREQkQJloiIiIiISIjoGiyRIGStXM63M5/k1JGTANi89ie+enYiLrcHd1wcvQbdSWJas73W25mzlbduu4xTbn+YtNb7smmNZcHTD+DxxtGsfQd6XPLvv5bduZOBAy/gmmsG07Pn0WGLTUREot/sWy8lPjEJgOTm+3DctbfvtcyubVt5965rOXP8NLzxCZSWlvLKoLNo0rItAJkdD4Zud/LRR+/z0ksv4HZ76Nu3H2ef/c+wxiLiVEqwRAK09K0ZrJr3AXEJjcqf+2raI/S49CbS23dkxSdvsvStFzjy4hv2WK+kqIgvnx6PNz6h/Lkvp9xPj0tuooXpzP9enszP8z+Gwy8EYOzYe3C5whOTiIjEjqKCfKC0vJPPnw2Lv+LbF59kZ87m8ue2/7GB9P0MfYaN32PZxx9/mOnTXyExsTEXXdSf3r1PpkmTJvVVfJEGQwmWxJT33nub+fM/Jz8/n82bN9G///nMm/cZ69b9zLXX3kBhYREvvzwDt9vNoYd25dprr+fPP//gwQfHUVDgW+fKKwfRq9fxXHLJALp2PYzVq1cBMG7cBFavXsWUKU/s8ZkDBlzI2WefTkqLVpx4873Me3x0+WvH33A3jZv6ZmIqLS7GExe/V5m/fmESnfqcxZI3p5c/l7c5ixamMwAtOnZm/f/mARcyc+Z0unbtRn5+UairTsTRkpMT8Ho9kS5GvfN43KSlNY50MaJOuOvlzTdnMXfuXPLzd5GVlcVFF/2LOXPmsGrVSoYMGUphYSHPPz8Nt9tD9+6HQ++B5G7+kwVTH6S4MJ+8rZs57Lyr2PeIXrw57GJaHtSVLetX48JF76Hj+Pbbtbw/5sE9PvPgvueRmNqMovxdfDj235SUFHP4gKtp3uGQPQvncnHK7Y/w9m2XlT+16ecV5G7J4v3Rg/HEJ9Dj4hugWwbGdMLtLiYx0YPL5SItrTFNmjh/+9J+tDfViX+1rRclWBJz8vLymDjxcT755ENefnkmkyc/x8qVy5g69Rk2bPiVp5+eTqNGjbjnnjv55puFgIsBAy7ksMO6s3TpYqZOfYpevY4nNzeXPn1O4aabhnH33XewcOF8+vQ5hUmTJvv93PY9TmD7nxv3eG53cvWHXcqPH77OaaMe3+P1lXPfpVGTNFp36bFHgpXcvBW//7CIln/rxi/fzado1y4WLFjAr7+uZ9Cgq/nqq29CW2kiDrdjR36kixAWaWmNyc7Oi3Qxok646yUvr4CcnG3lbdGMGb62aNGi//HyyzP2aIvGjx/NriVf43K5OLjvAPY5+DD+sEv5/rWn2feIXhTm5bLf0SfR89Kb+eyxUfz6/UK6XzfA71mqLetXc8jpF9DxxDPYtvEXPh53C+dMfHGPZVofeuRe6zVumsGhZ/2L/XqeyB8rFvP5pNHQdzZt27anf/9/kpiYSK9eJ1BS4m0Q25f2o72pTvzbXS9V3U+uKkqwJOZ06GAASE5OoX37/UhrlkyzZk0pKiogJyebESNuBiA3N5ecnE10796dJ598kk8+eQ+Xy4Xb7btxMEDHjr73at68BQUFBSxe/H2VZ7Cq8vOXn7Dkzec5afgDNGrSdI/XVs59F1wuNi79li3rVjLviXvoPfR+jrt2BF9Ne4TvX3+WFp264PbG8dprr7Fu3XoGDryEn3/+mZ9+WkF6enp5vCIiEj0qt0Uul4uUlBR27txJdvZWhgzxDRcvLMynSWZHWnTqwuJZ01j533fA5aKkqLj8vdL36whAUnoLigvy+fbbb/2ewWrdpQdNWrbB5XKR2qodCSmp5G3dDLSstqwZ+3fC5fGd4W3RqQt5WzexYsUKFiz4gldffYvExERGj76TOXM+4cQT+4SqikQaLCVYEnNclS5Qive6eWbFVtbvKMKVmslBNzyA2+tl5dx3+a7Rvjxz93jMif1o0+0oVs59l3U/rSPeu3sCzT3fq0uXrlWewfJn9bwPsZ+8yal3TSIhee9x66eN+itZe//uwRx1xVAap6WzbP7H9Bo8kkYpqSx8dgKtu/bkocv6kZW1nbS0xgwdOozevU9WciUiEqUqt0UVn2/evAUPP/wEXq+XefM+ZoGrJd+9MmWPtmjlZ+9V+d7du3f3ewZrxUez2PrLao66fAh5W7Io3JlL46bpNZZ10WvP0Cgllc79LmTLupUkpTcnJSWFhIQEEhIS8Hg8NG3ajO3btwVeASJSJSVY4hhur5dD+g7gvbuvo7SkhOTMlux3VG/263ki38yYxJLZ00lq1pz87dkh+bySkmIWPjeR5IwWzHloBAAt/9aVbv2vYNiwYcSfdDHJGf57FZu0bMOHY27AE9+IfQ4+jLbdNFugiIgTeDxezjvvQgYPvori4mLat29HxoAhIWmLOpx4Ol88MZZ3R16LCzjm6hG4PV6effZZ1hel0a77cX7XO/TMi/j88dH8suhL3G4Px157B61bt+bMM89h0KDL8XrjaN26DaeddkYdoxcRAFdpaWlAC2ZlbQ9swUqcNKbTSbGAc+LJzExh3KJNQa1za7cMsrK219tn3Noto9Zlcsr3spuT4nFSLBBd8WRmptRp7szatlGxJpq+s2gSzfVS2zYqXG1OQxTN20ukqE78q3ANVlBtlG40LCIiIiIiEiJKsEREREREREJECZaIiIiIiEiIBDzJRW1v4uikG5c5KRZwXjzBKCopDfqeBuGQltbYcd+Lk+JxUizgvHhERESiQcAJVm1v4uiki+acFAs4J57aJEpetyvoC4jDITs7zzHfy25OisdJsUB0xRONHR4iIiK1oSGCIiIiIiIiIaL7YImIiIgEKLVpUoWb1YuI7E0JlkiUqHhdWCDDpQqKSsjZmlvfxRIRkQrive6oHGIuItFDCZZIlIjW68JERMR5gp3sSZ16IoFTgiUiIiLSwKhTT6T+KMESiVG1mWpePZAiInvSNVUiEmpKsERiVLC9j6AeSBGRynRNlYiEmrpsREREREREQkQJloiIiIiISIgowRIREREREQkRJVgiIiIiIiIhogRLREREREQkRJRgiYiIiIiIhIimaRcRERGRkKrN/cV0r0ZxCiVYIiIiIhJSwd5fDHSPMXEODREUEREREREJEZ3BEhGRmJecnIDX64l0Meqdx+MmLa1xpIsRdVQv4RGOOg7HZ2h72ZvqxL/a1osSLBERiXk7duRHughhkZbWmOzsvEgXI+rUpV4yM1NCXBrnCqaOa1uv4di+tR/tTXXi3+56CXZ7VoIlIiIiItUqKilVMioSICVYIiIiIlItr9sV1KQVmrBCGjJNciEiIiIiIhIiOoMlIiIijlCbey+JiISaEiwRERFxBN17SUSiQcAJVm2nwHXStI9OigWcF48EJtzfuZO2MyfFAs6LR0REJBoEnGDVdgpcJ0376KRYwDnxaFaj4IT7O3fKdgbOigWiKx7tx+JPMEP+tA2JSLTQEEERERGJSsEO+dNwPxGJBroSVEREREREJESUYImIiIiIiISIEiwREREREZEQ0TVYEpTa3GOkoKiEnK259VQiEREREZHooQRLgqJ7jIiIiIiIVE1DBEVEREREREJECZaIiIiIiEiIaIigRJ3aXOclIiIisa2opDSoG0brGm+JVkqwJOroxpL1R42XiIhEK6/bpfZfHEEJlkgDEmzjNaRLuhIyERERkSAowRKRKqk3UURERCQ4utBFREREREQkRHQGS+pdsNf9iIiIiIjEKiVYUu80zExEREREGgolWCIiIiISczQzrkQrJVgiIiIiEnM0QkailSa5EBERERERCRGdwRIRkZiXnJyA1+uJdDHqncfjJi2tcaSLIRKz0tIaaz/yQ3XiX23rRQmWiIjEvB078iNdhLBIS2tMdnZepIsRNpqBVkItOzuvwe1HgVCd+Le7XoI9FmmIoIiIiIiISIgowRIREREREQkRJVgiIiIiIiIhEvA1WLW9gNhJF805KRZwXjwSHSpvU07azpwUCzgvHhERkWgQcIJV2wuInXTRnJNiAV88pS4X8V6dyJTQqbyPOGm/cVIsEF3xaDIDERFxCs0i2MDFe926SZ+IiIRFatMkdeqJiOMpwRIREZGwUKeeiDQE6kYSEREREREJESVYIiIiIiIiIaIES0REREREJESUYImIiIiIiISIJrlwEM3OJCIiIiISWUqwHCTY2ZlAMzSJiIiIiISSTneIiIiIiIiEiBIsERERERGRENEQQREJmaKSUjIzU/Z63t9zuxWWlBLndgX8GQVFJeRsza1V+URERETqmxIsEQkZr9tVq+sAg1lH1w2KiEi4BDuBmDoBBZRgiYiIiIj4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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111b9c4a8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Uncensored model\n",
    "with uncensored_model:\n",
    "    trace = pm.sample(tune=1000)  # Increase `tune` to avoid divergences\n",
    "    pm.plot_posterior(trace);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [left_censored, right_censored, sigma, mu]\n",
      "Sampling 2 chains: 100%|██████████| 2000/2000 [00:04<00:00, 478.99draws/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112418320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Imputed censored model\n",
    "with imputed_censored_model:\n",
    "    trace = pm.sample()\n",
    "    pm.plot_posterior(trace, varnames=['mu', 'sigma']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [sigma, mu]\n",
      "Sampling 2 chains: 100%|██████████| 3000/3000 [00:01<00:00, 1960.47draws/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111fd2b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Unimputed censored model\n",
    "with unimputed_censored_model:\n",
    "    trace = pm.sample(tune=1000)  # Increase `tune` to avoid divergences\n",
    "    pm.plot_posterior(trace, varnames=['mu', 'sigma']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discussion\n",
    "\n",
    "As we can see, both censored models appear to capture the mean and variance of the underlying distribution as well as the uncensored model! In addition, the imputed censored model is capable of generating data sets of censored values (sample from the posteriors of `left_censored` and `right_censored` to generate them), while the unimputed censored model scales much better with more censored data, and converges faster."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Authors\n",
    "\n",
    "- Originally authored by [Luis Mario Domenzain](https://github.com/domenzain) on Mar 7, 2017.\n",
    "\n",
    "- Updated by [George Ho](https://github.com/eigenfoo) on Jul 14, 2018."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
